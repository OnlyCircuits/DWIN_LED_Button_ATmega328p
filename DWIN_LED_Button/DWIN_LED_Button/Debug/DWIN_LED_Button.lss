
DWIN_LED_Button.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000015a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000106  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000015a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000018c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000708  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000672  00000000  00000000  00000904  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000263  00000000  00000000  00000f76  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  000011dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003d5  00000000  00000000  00001230  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000066  00000000  00000000  00001605  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  0000166b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 57 00 	call	0xae	; 0xae <main>
  78:	0c 94 81 00 	jmp	0x102	; 0x102 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <_Z10usart_initv>:
#define F_CPU 16000000UL

#include <avr/io.h>

void usart_init (void){
	UCSR0A = (1<<U2X0);
  80:	82 e0       	ldi	r24, 0x02	; 2
  82:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	UCSR0B = (1<<RXEN0);
  86:	80 e1       	ldi	r24, 0x10	; 16
  88:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1<< UCSZ01)|(1<<UCSZ00);
  8c:	86 e0       	ldi	r24, 0x06	; 6
  8e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	UBRR0 = 16;
  92:	80 e1       	ldi	r24, 0x10	; 16
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  9a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  9e:	08 95       	ret

000000a0 <_Z13usart_receivev>:
}

unsigned char usart_receive(void){
	
	while (!(UCSR0A & (1<<RXC0)));
  a0:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  a4:	88 23       	and	r24, r24
  a6:	e4 f7       	brge	.-8      	; 0xa0 <_Z13usart_receivev>
	return UDR0;
  a8:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
  ac:	08 95       	ret

000000ae <main>:

int main(void)
{
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
  b2:	cd b7       	in	r28, 0x3d	; 61
  b4:	de b7       	in	r29, 0x3e	; 62
  b6:	29 97       	sbiw	r28, 0x09	; 9
  b8:	0f b6       	in	r0, 0x3f	; 63
  ba:	f8 94       	cli
  bc:	de bf       	out	0x3e, r29	; 62
  be:	0f be       	out	0x3f, r0	; 63
  c0:	cd bf       	out	0x3d, r28	; 61
	usart_init();
  c2:	0e 94 40 00 	call	0x80	; 0x80 <_Z10usart_initv>
	
	DDRB = 0xFF;
  c6:	8f ef       	ldi	r24, 0xFF	; 255
  c8:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00;
  ca:	15 b8       	out	0x05, r1	; 5
	unsigned char buff[9];
	
	while (1)
	{
		
		for (uint8_t c = 0; c <= 8; c++)
  cc:	10 e0       	ldi	r17, 0x00	; 0
  ce:	19 30       	cpi	r17, 0x09	; 9
  d0:	68 f4       	brcc	.+26     	; 0xec <main+0x3e>
		{
			buff[c] = usart_receive();
  d2:	e1 2e       	mov	r14, r17
  d4:	f1 2c       	mov	r15, r1
  d6:	0e 94 50 00 	call	0xa0	; 0xa0 <_Z13usart_receivev>
  da:	e1 e0       	ldi	r30, 0x01	; 1
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	ec 0f       	add	r30, r28
  e0:	fd 1f       	adc	r31, r29
  e2:	ee 0d       	add	r30, r14
  e4:	ff 1d       	adc	r31, r15
  e6:	80 83       	st	Z, r24
	unsigned char buff[9];
	
	while (1)
	{
		
		for (uint8_t c = 0; c <= 8; c++)
  e8:	1f 5f       	subi	r17, 0xFF	; 255
  ea:	f1 cf       	rjmp	.-30     	; 0xce <main+0x20>
		{
			buff[c] = usart_receive();
		}

		if (buff[8] == 0x01)
  ec:	89 85       	ldd	r24, Y+9	; 0x09
  ee:	81 30       	cpi	r24, 0x01	; 1
  f0:	21 f4       	brne	.+8      	; 0xfa <main+0x4c>
		{
			PORTB |= (1<<1);
  f2:	85 b1       	in	r24, 0x05	; 5
  f4:	82 60       	ori	r24, 0x02	; 2
  f6:	85 b9       	out	0x05, r24	; 5
  f8:	e9 cf       	rjmp	.-46     	; 0xcc <main+0x1e>
		}
		else
		{
			PORTB &= ~(1<<1);
  fa:	85 b1       	in	r24, 0x05	; 5
  fc:	8d 7f       	andi	r24, 0xFD	; 253
  fe:	85 b9       	out	0x05, r24	; 5
 100:	e5 cf       	rjmp	.-54     	; 0xcc <main+0x1e>

00000102 <_exit>:
 102:	f8 94       	cli

00000104 <__stop_program>:
 104:	ff cf       	rjmp	.-2      	; 0x104 <__stop_program>
